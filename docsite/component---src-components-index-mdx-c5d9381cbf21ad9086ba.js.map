{"version":3,"sources":["webpack:///../src/components/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-components-index-mdx-c5d9381cbf21ad9086ba.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/unite-project/获取template模板/modelCom/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"项目代码规范\"\n    }}>{`项目/代码规范`}</h1>\n    <h2 {...{\n      \"id\": \"pc-常规spa\"\n    }}>{`PC （常规SPA）`}</h2>\n    <h3 {...{\n      \"id\": \"项目目录规范\"\n    }}>{`项目目录规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`文档规范`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`每个模块下，请给出对应的md文件，批注当前的模块和注意事项`}</li>\n          <li parentName=\"ul\">{`启动项目的时候，添加对于如何启动项目，配置项目等相关说明 `}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`目录规范`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`目录设计规范:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`API：api存放路径 `}</li>\n          <li parentName=\"ul\">{`Component: 业务组件存放路径(ps: (全局Component:不包含任何的业务逻辑))`}</li>\n          <li parentName=\"ul\">{`Common: 公共的组件存放路径(ps: 包含业务，可抽离，多出通用的组件)`}</li>\n          <li parentName=\"ul\">{`Redux: 数据管理存放路径`}</li>\n          <li parentName=\"ul\">{`Router: 路由存放路径`}</li>\n          <li parentName=\"ul\">{`Config: 配置文件存放路径(ps: (全局Config：router等可作为全局配置的变量常量等，可存放在这个目录下))`}</li>\n          <li parentName=\"ul\">{`Util: 工具包存放路径(ps: 例如：fetch/ws/util 等工具文件，（全局Util: 只防止公共的，勿放入于业务耦合度过高的工具）)`}</li>\n          <li parentName=\"ul\">{`Script: 脚本存放路径(ps: 存放本地运行或者上线打包的脚本或者项目所需执行的脚本(性能监控/统计/SDK等))`}</li>\n          <li parentName=\"ul\">{`Style: 样式存放路径\n......`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`目录命名规范:(均用英文命名，切勿用夹生的拼音或者中式英文命名)`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`模块/(html/js)文件名称：小驼峰命名`}</li>\n          <li parentName=\"ul\">{`图片资源名称：xxx`}{`[Img/Icon]`}</li>\n        </ul>\n      </li>\n    </ul>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"设计规范\"\n    }}>{`设计规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`页面设计规范`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`如果有不同分辨率的ui，就根据不同分辨率做设计; 如果没有就更具实际情况，设置宽度上限，和实现各尺寸下页面布局的兼容`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`样式设计规范`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`在全局维护css的全局样式变量， `}<strong parentName=\"li\">{`开发人员在开发过程中严格使用全局的样式（例如：字体（颜色+家族+粗细等）样式, 背景色等变量）`}</strong>{`  例如 `}<inlineCode parentName=\"li\">{`@primary_color： black;`}</inlineCode></li>\n      <li parentName=\"ul\">{`如果是公共一组样式(重复率高)，也可以放入全局style目录下做维护`}</li>\n      <li parentName=\"ul\">{`设计之初杜绝样式污染`}</li>\n      <li parentName=\"ul\">{`样式兼容：兼容IE8及以上、Firefox、chrome、QQ浏览器页面,如无指定，不需要兼容IE6、7,不兼容IE6、7的情况下，需要在页面顶部加入提示，并对.browser-tips使用醒目的颜色标识样式 `}<inlineCode parentName=\"li\">{`<!--[if lt IE 8]><p class=\"browser-tips\">您的浏览器版本过低，请升级浏览器获得更好的体验<p><![endif]-->`}</inlineCode></li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`业务组件设计规范:\n1：考虑道业务的兼容性class优先级使用高于函数式\n2：如果组件不需要状态, 则使用无状态组件\n3：性能上比较: 无状态函数 > 有状态函数 > class 组件\n4：最小化 props(接口). 不要传递超过要求的 props\n5：如果组件内部存在较多条件控制流, 这通常意味着需要对组件进行抽取\n6：不要过早优化. 只要求组件在当前需求下可被复用, 然后'随机应变'\n7： 通用组件接口规范`}</li>\n    </ul>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`参数`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`说明`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`size`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`尺寸`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`medium`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`color`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`颜色`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`''`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`disabled`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`是否禁用`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`bool`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`false`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`className`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`额外的类名`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`string`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`''`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`style`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`内联样式`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`object`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"center\"\n          }}>{`{}`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"css规范\"\n    }}>{`css规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`不随意使用import`}</li>\n      <li parentName=\"ul\">{`id选择元素视为反模式，少用`}</li>\n      <li parentName=\"ul\">{`z-index从0,1,2...递增，不随意赋值很大的值`}</li>\n      <li parentName=\"ul\">{`使用nest selectors 但是注意嵌套层数不能过多（6），如果过多考虑拆分页面或者重构页面`}</li>\n      <li parentName=\"ul\">{`命名使用dash-cased或者camelCased形式，根据项目统一其中一种格式`}</li>\n      <li parentName=\"ul\">{`优先级先破折号后小驼峰`}</li>\n      <li parentName=\"ul\">{`当在规则声明中使用多个选择器时，给每个选择器指定自己的行`}</li>\n      <li parentName=\"ul\">{`嵌套比较多或者复杂的页面，注意注释的编写`}</li>\n    </ul>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"js规范\"\n    }}>{`js规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`使用 Number.isNaN 代替 全局的 isNaN`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`//  bad\nisNaN('1.2'); // false\nisNaN('1.2.3'); // true\n// good\nNumber.isNaN('1.2.3'); // false\nNumber.isNaN(Number('1.2.3')); // true\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用 const 代替 var 的无脑使用`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nvar a = 1;\nvar b = 2;\n// good\nconst a = 1;\nconst b = 2;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用 const 代替 var 的无脑使用（减少重新分配引用的操作,防止bug和难以理解的错误）`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nvar a = 1;\nvar b = 2;\n// good\nconst a = 1;\nconst b = 2;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用 let 代替 var 的无脑使用（let是块作用域，而不是像var那样是函数作用域）`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nvar count = 1;\nif (true) {\n  count += 1;\n}\n// good, use the let.\nlet count = 1;\nif (true) {\n  count += 1;\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用Literal Syntax代替new 一个新对象`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nconst item = new Object();\n// good\nconst item = {};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用Literal Syntax代替new 一个新对象或者数组`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nconst item = new Object();\n// good\nconst item = {};\n// bad\nconst items = new Array();\n// good\nconst items = [];\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`在创建具有动态属性名的对象时使用计算属性名`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function getKey(k) {\n  return \\`a key named \\${k}\\`;\n}\n// bad\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n// good\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n  [getKey('enabled')]: true,\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`只引用无效标识符的属性（改进了语法高亮显示，也更容易被许多JS引擎优化）`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5,\n};\n// good\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5,\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`直接使用prototype方法，如hasOwnProperty, propertyIsEnumerable和isPrototypeOf 并且勿随意对prototype的方法操作`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nconsole.log(object.hasOwnProperty(key));\n// good\nconsole.log(Object.prototype.hasOwnProperty.call(object, key));\n// best\nconst has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\nconsole.log(has.call(object, key));\n/* or */\nimport has from 'has'; // https://www.npmjs.com/package/has\nconsole.log(has(object, key));\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`在数组方法回调中使用return语句。 如果函数体由一条语句组成，返回一个没有副作用的表达式，那么省略return是可以的`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  } else {\n    return false;\n  }\n});\n// good\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  }\n  return false;\n});\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用数组解构或者对象结构的方式，让代码更简洁`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const arr = [1, 2, 3, 4];\n// bad\nconst first = arr[0];\nconst second = arr[1];\n// good\nconst [first, second] = arr;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`对象的结构优先级高于数组结构`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`// bad\nfunction processInput(input) {\n  // then a miracle occurs\n  return [left, right, top, bottom];\n}\n// the caller needs to think about the order of return data\nconst [left, __, top] = processInput(input);\n// good\nfunction processInput(input) {\n  // then a miracle occurs\n  return { left, right, top, bottom };\n}\n// the caller selects only the data they need\nconst { left, top } = processInput(input);\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`构建字符串时，应使用模板字符串而不是连接字符串(模板字符串给你一个可读的，简洁的语法和适当的换行和字符串插值特性)`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javasscript\"\n      }}>{`// bad\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n// bad\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n// good\nfunction sayHi(name) {\n  return \\`How are you, \\${name}?\\`;\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`永远不要对字符串使用eval()，会造成更多的bug`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`ECMA-262将块定义为语句列表。 函数声明不是语句`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n// good\nlet test;\nif (currentUser) {\n  test = () => {\n    console.log('Yup.');\n  };\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`\n+ 不要给参数命名为arguments\n\\`\\`\\`javascript\n// bad\nfunction foo(name, options, arguments) {\n  // ...\n}\n// good\nfunction foo(name, options, args) {\n  // ...\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`拓展符代替直接使用arguments`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n// good\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`使用默认参数语法，而不是改变函数参数`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// really bad\nfunction handleThings(opts) {\n  opts = opts || {};\n  // ...\n}\n// still bad\nfunction handleThings(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // ...\n}\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`永远不要使用Function构造函数来创建新函数(以类似于eval()的方式创建函数来计算字符串, 会有漏洞)`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`避免将箭头函数语法(=>)与比较操作符(<=，>=)混淆(确保代码可读)`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    // bad\nconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\n// bad\nconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\n// good\nconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\n// good\nconst itemHeight = (item) => {\n  const { height, largeSize, smallSize } = item;\n  return height <= 256 ? largeSize : smallSize;\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`总是使用类。 避免直接操纵原型(针对封装的工具类：类语法更简洁，也更容易阅读)`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nfunction Queue(contents = []) {\n  this.queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};\n// good\nclass Queue {\n  constructor(contents = []) {\n    this.queue = [...contents];\n  }\n  pop() {\n    const value = this.queue[0];\n    this.queue.splice(0, 1);\n    return value;\n  }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`使用=== 和 !== 代替 == and !=`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`避免不必要的三元语句`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    // bad\nconst foo = a ? a : b;\nconst bar = c ? true : false;\nconst baz = c ? false : true\n// good\nconst foo = a || b;\nconst bar = !!c;\nconst baz = !c;\n`}</code></pre>\n    <hr></hr>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"react规范\"\n    }}>{`react规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`如果你有内部状态和/或引用，最好是类扩展React 代替React.createClass`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    // bad\nconst Listing = React.createClass({\n  // ...\n  render() {\n    return <div>{this.state.hello}</div>;\n  }\n});\n// good\nclass Listing extends React.Component {\n  // ...\n  render() {\n    return <div>{this.state.hello}</div>;\n  }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`如果state或者refs，使用函数式代替class`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`高阶组件命名:使用高阶组件名称和传入组件名称的组合作为生成组件的displayName（会相对友好点：三方组件或者错误消息）`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    // bad\nclass Listing extends React.Component {\n  render() {\n    return <div>{this.props.hello}</div>;\n  }\n}\n// bad(不鼓励依赖函数名推断 )\nconst Listing = ({ hello }) => (\n  <div>{hello}</div>\n);\n// good\nfunction Listing({ hello }) {\n  return <div>{hello}</div>;\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`对React组件使用.jsx扩展`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\nexport default function withFoo(WrappedComponent) {\n  return function WithFoo(props) {\n    return <WrappedComponent {...props} foo />;\n  }\n}\n// good\nexport default function withFoo(WrappedComponent) {\n  function WithFoo(props) {\n    return <WrappedComponent {...props} foo />;\n  }\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    || 'Component';\n  WithFoo.displayName = \\`withFoo(\\${wrappedComponentName})\\`;\n  return WithFoo;\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`组件参数避免DOM component prop names， 例如 style, className...`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`不要使用displayName来命名组件。 相反，应该通过引用来命名组件`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    // bad\nexport default React.createClass({\n  displayName: 'ReservationCard',\n  // stuff goes here\n});\n// good\nexport default class ReservationCard extends React.Component {\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`始终为所有非必需的参数定义显式的defaultProps`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`    // bad\nfunction SFC({ foo, bar, children }) {\n  return <div>{foo}{bar}{children}</div>;\n}\nSFC.propTypes = {\n  foo: PropTypes.number.isRequired,\n  bar: PropTypes.string,\n  children: PropTypes.node,\n};\n// good\nfunction SFC({ foo, bar, children }) {\n  return <div>{foo}{bar}{children}</div>;\n}\nSFC.propTypes = {\n  foo: PropTypes.number.isRequired,\n  bar: PropTypes.string,\n  children: PropTypes.node,\n};\nSFC.defaultProps = {\n  bar: '',\n  children: null,\n};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`总是使用ref callbacks`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad\n<Foo\n  ref=\"myRef\"\n/>\n// good\n<Foo\n  ref={(ref) => { this.myRef = ref; }}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"格式规范\"\n    }}>{`格式规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`默认缩进2个空格`}</li>\n      <li parentName=\"ul\">{`单引号`}</li>\n      <li parentName=\"ul\">{`分号`}</li>\n      <li parentName=\"ul\">{`数组/对象元素开始或结尾的对象的花括号中有空格`}</li>\n      <li parentName=\"ul\">{`数组括号内需要一个或多个空格或换行符`}</li>\n      <li parentName=\"ul\">{`允许在空行上结尾空白`}</li>\n      <li parentName=\"ul\">{`允许评论块中的尾部空白`}</li>\n      <li parentName=\"ul\">{`强制连续空行的最大数量 1`}</li>\n      <li parentName=\"ul\">{`在文件结尾处强制执行最大数量的连续空行 0`}</li>\n      <li parentName=\"ul\">{`在文件的开头强制执行最大数量的连续空行 0`}</li>\n    </ul>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"代码提交规范规范\"\n    }}>{`代码提交规范规范：`}</h3>\n    <p>{` 仓库代码提交规范:  `}{`[时间]`}{`20211010 | `}{`[版本]`}{` feature/3.41.1 | `}{`[标识]`}{` : `}{`[日志]`}{` (or use the util in @glen-build directly)\n例子： 202211010|feature/3.41.1|fix: bug fix example`}</p>\n    <ul>\n      <li parentName=\"ul\">{`feat：新功能（feature）`}</li>\n      <li parentName=\"ul\">{`fix：修补bug`}</li>\n      <li parentName=\"ul\">{`docs：文档（documentation）`}</li>\n      <li parentName=\"ul\">{`style： 格式（不影响代码运行的变动）`}</li>\n      <li parentName=\"ul\">{`refactor：重构（即不是新增功能，也不是修改bug的代码变动）`}</li>\n      <li parentName=\"ul\">{`test：增加测试`}</li>\n      <li parentName=\"ul\">{`chore：构建过程或辅助工具的变动`}</li>\n      <li parentName=\"ul\">{`revert: 代码回滚`}</li>\n      <li parentName=\"ul\">{`build: 影响系统构建或者外部依赖的更改（例如：glup，npm, broccoli）`}</li>\n      <li parentName=\"ul\">{`ci: 对CI配置文件和脚本的修改`}</li>\n      <li parentName=\"ul\">{`perf:性能提升`}</li>\n    </ul>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"业务流程规范\"\n    }}>{`业务流程规范：`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`仓库代码需要fork之后管理在自己名下， 对应的自研辅助工具 @glen-build git`}</li>\n      <li parentName=\"ul\">{`jiara: 确认需求`}</li>\n      <li parentName=\"ul\">{`confluence： 获取和查看文档`}</li>\n      <li parentName=\"ul\">{`wechat/飞书: 需求交流和交互`}</li>\n      <li parentName=\"ul\">{`提测： `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`merge request -> 提交项目负责人走code view`}</li>\n          <li parentName=\"ul\">{`上线 -> 测试技术群@ 到技术人员， 通知测试环境或者语法环境可上线`}</li>\n          <li parentName=\"ul\">{`开发jiara申请提测，对应连接 粘贴到上线群，主管审核确认，运维负责上线`}</li>\n        </ul>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}