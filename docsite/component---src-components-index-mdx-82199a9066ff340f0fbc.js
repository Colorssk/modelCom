(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{Be30:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return u}));var a=n("Fcif"),l=n("+I+c"),b=(n("mXGw"),n("/FXl")),r=n("TjRS"),c=(n("aD51"),["components"]),o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!Object.prototype.hasOwnProperty.call(o,"__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/index.mdx"}});var p={_frontmatter:o},i=r.a;function u(e){var t=e.components,n=Object(l.a)(e,c);return Object(b.b)(i,Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"项目代码规范"},"项目/代码规范"),Object(b.b)("h2",{id:"pc-常规spa"},"PC （常规SPA）"),Object(b.b)("h3",{id:"项目目录规范"},"项目目录规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"文档规范",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"每个模块下，请给出对应的md文件，批注当前的模块和注意事项"),Object(b.b)("li",{parentName:"ul"},"启动项目的时候，添加对于如何启动项目，配置项目等相关说明 "))),Object(b.b)("li",{parentName:"ul"},"目录规范")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"目录设计规范:",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"API：api存放路径 "),Object(b.b)("li",{parentName:"ul"},"Component: 业务组件存放路径(ps: (全局Component:不包含任何的业务逻辑))"),Object(b.b)("li",{parentName:"ul"},"Common: 公共的组件存放路径(ps: 包含业务，可抽离，多出通用的组件)"),Object(b.b)("li",{parentName:"ul"},"Redux: 数据管理存放路径"),Object(b.b)("li",{parentName:"ul"},"Router: 路由存放路径"),Object(b.b)("li",{parentName:"ul"},"Config: 配置文件存放路径(ps: (全局Config：router等可作为全局配置的变量常量等，可存放在这个目录下))"),Object(b.b)("li",{parentName:"ul"},"Util: 工具包存放路径(ps: 例如：fetch/ws/util 等工具文件，（全局Util: 只防止公共的，勿放入于业务耦合度过高的工具）)"),Object(b.b)("li",{parentName:"ul"},"Script: 脚本存放路径(ps: 存放本地运行或者上线打包的脚本或者项目所需执行的脚本(性能监控/统计/SDK等))"),Object(b.b)("li",{parentName:"ul"},"Style: 样式存放路径\n......"))),Object(b.b)("li",{parentName:"ul"},"目录命名规范:(均用英文命名，切勿用夹生的拼音或者中式英文命名)",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"模块/(html/js)文件名称：小驼峰命名"),Object(b.b)("li",{parentName:"ul"},"图片资源名称：xxx","[Img/Icon]")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"设计规范"},"设计规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"页面设计规范")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"如果有不同分辨率的ui，就根据不同分辨率做设计; 如果没有就更具实际情况，设置宽度上限，和实现各尺寸下页面布局的兼容")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"样式设计规范")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"在全局维护css的全局样式变量， ",Object(b.b)("strong",{parentName:"li"},"开发人员在开发过程中严格使用全局的样式（例如：字体（颜色+家族+粗细等）样式, 背景色等变量）"),"  例如 ",Object(b.b)("inlineCode",{parentName:"li"},"@primary_color： black;")),Object(b.b)("li",{parentName:"ul"},"如果是公共一组样式(重复率高)，也可以放入全局style目录下做维护"),Object(b.b)("li",{parentName:"ul"},"设计之初杜绝样式污染"),Object(b.b)("li",{parentName:"ul"},"样式兼容：兼容IE8及以上、Firefox、chrome、QQ浏览器页面,如无指定，不需要兼容IE6、7,不兼容IE6、7的情况下，需要在页面顶部加入提示，并对.browser-tips使用醒目的颜色标识样式 ",Object(b.b)("inlineCode",{parentName:"li"},'\x3c!--[if lt IE 8]><p class="browser-tips">您的浏览器版本过低，请升级浏览器获得更好的体验<p><![endif]--\x3e'))),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"业务组件设计规范:\n1：考虑道业务的兼容性class优先级使用高于函数式\n2：如果组件不需要状态, 则使用无状态组件\n3：性能上比较: 无状态函数 > 有状态函数 > class 组件\n4：最小化 props(接口). 不要传递超过要求的 props\n5：如果组件内部存在较多条件控制流, 这通常意味着需要对组件进行抽取\n6：不要过早优化. 只要求组件在当前需求下可被复用, 然后'随机应变'\n7： 通用组件接口规范")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:"center"},"参数"),Object(b.b)("th",{parentName:"tr",align:"center"},"说明"),Object(b.b)("th",{parentName:"tr",align:"center"},"类型"),Object(b.b)("th",{parentName:"tr",align:"center"},"默认值"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"center"},"size"),Object(b.b)("td",{parentName:"tr",align:"center"},"尺寸"),Object(b.b)("td",{parentName:"tr",align:"center"},"string"),Object(b.b)("td",{parentName:"tr",align:"center"},"medium")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"center"},"color"),Object(b.b)("td",{parentName:"tr",align:"center"},"颜色"),Object(b.b)("td",{parentName:"tr",align:"center"},"string"),Object(b.b)("td",{parentName:"tr",align:"center"},"''")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"center"},"disabled"),Object(b.b)("td",{parentName:"tr",align:"center"},"是否禁用"),Object(b.b)("td",{parentName:"tr",align:"center"},"bool"),Object(b.b)("td",{parentName:"tr",align:"center"},"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"center"},"className"),Object(b.b)("td",{parentName:"tr",align:"center"},"额外的类名"),Object(b.b)("td",{parentName:"tr",align:"center"},"string"),Object(b.b)("td",{parentName:"tr",align:"center"},"''")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:"center"},"style"),Object(b.b)("td",{parentName:"tr",align:"center"},"内联样式"),Object(b.b)("td",{parentName:"tr",align:"center"},"object"),Object(b.b)("td",{parentName:"tr",align:"center"},"{}")))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"css规范"},"css规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"不随意使用important"),Object(b.b)("li",{parentName:"ul"},"id选择元素视为反模式，少用"),Object(b.b)("li",{parentName:"ul"},"z-index从0,1,2...递增，不随意赋值很大的值"),Object(b.b)("li",{parentName:"ul"},"使用nest selectors 但是注意嵌套层数不能过多（6），如果过多考虑拆分页面或者重构页面"),Object(b.b)("li",{parentName:"ul"},"命名使用dash-cased或者camelCased形式，根据项目统一其中一种格式"),Object(b.b)("li",{parentName:"ul"},"优先级先破折号后小驼峰"),Object(b.b)("li",{parentName:"ul"},"当在规则声明中使用多个选择器时，给每个选择器指定自己的行"),Object(b.b)("li",{parentName:"ul"},"嵌套比较多或者复杂的页面，注意注释的编写")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"js规范"},"js规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用 Number.isNaN 代替 全局的 isNaN")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"//  bad\nisNaN('1.2'); // false\nisNaN('1.2.3'); // true\n// good\nNumber.isNaN('1.2.3'); // false\nNumber.isNaN(Number('1.2.3')); // true\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用 const 代替 var 的无脑使用")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nvar a = 1;\nvar b = 2;\n// good\nconst a = 1;\nconst b = 2;\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用 const 代替 var 的无脑使用（减少重新分配引用的操作,防止bug和难以理解的错误）")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nvar a = 1;\nvar b = 2;\n// good\nconst a = 1;\nconst b = 2;\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用 let 代替 var 的无脑使用（let是块作用域，而不是像var那样是函数作用域）")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nvar count = 1;\nif (true) {\n  count += 1;\n}\n// good, use the let.\nlet count = 1;\nif (true) {\n  count += 1;\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用Literal Syntax代替new 一个新对象")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst item = new Object();\n// good\nconst item = {};\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用Literal Syntax代替new 一个新对象或者数组")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst item = new Object();\n// good\nconst item = {};\n// bad\nconst items = new Array();\n// good\nconst items = [];\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"在创建具有动态属性名的对象时使用计算属性名")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"function getKey(k) {\n  return `a key named ${k}`;\n}\n// bad\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n// good\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n  [getKey('enabled')]: true,\n};\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"只引用无效标识符的属性（改进了语法高亮显示，也更容易被许多JS引擎优化）")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5,\n};\n// good\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5,\n};\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"直接使用prototype方法，如hasOwnProperty, propertyIsEnumerable和isPrototypeOf 并且勿随意对prototype的方法操作")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconsole.log(object.hasOwnProperty(key));\n// good\nconsole.log(Object.prototype.hasOwnProperty.call(object, key));\n// best\nconst has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\nconsole.log(has.call(object, key));\n/* or */\nimport has from 'has'; // https://www.npmjs.com/package/has\nconsole.log(has(object, key));\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"在数组方法回调中使用return语句。 如果函数体由一条语句组成，返回一个没有副作用的表达式，那么省略return是可以的")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  } else {\n    return false;\n  }\n});\n// good\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  }\n  return false;\n});\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用数组解构或者对象结构的方式，让代码更简洁")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"const arr = [1, 2, 3, 4];\n// bad\nconst first = arr[0];\nconst second = arr[1];\n// good\nconst [first, second] = arr;\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"对象的结构优先级高于数组结构"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction processInput(input) {\n  // then a miracle occurs\n  return [left, right, top, bottom];\n}\n// the caller needs to think about the order of return data\nconst [left, __, top] = processInput(input);\n// good\nfunction processInput(input) {\n  // then a miracle occurs\n  return { left, right, top, bottom };\n}\n// the caller selects only the data they need\nconst { left, top } = processInput(input);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"构建字符串时，应使用模板字符串而不是连接字符串(模板字符串给你一个可读的，简洁的语法和适当的换行和字符串插值特性)"))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javasscript"},"// bad\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n// bad\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n// good\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"永远不要对字符串使用eval()，会造成更多的bug")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"ECMA-262将块定义为语句列表。 函数声明不是语句"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n// good\nlet test;\nif (currentUser) {\n  test = () => {\n    console.log('Yup.');\n  };\n}\n")))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre"},"\n+ 不要给参数命名为arguments\n```javascript\n// bad\nfunction foo(name, options, arguments) {\n  // ...\n}\n// good\nfunction foo(name, options, args) {\n  // ...\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"拓展符代替直接使用arguments")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n// good\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"使用默认参数语法，而不是改变函数参数")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// really bad\nfunction handleThings(opts) {\n  opts = opts || {};\n  // ...\n}\n// still bad\nfunction handleThings(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // ...\n}\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"永远不要使用Function构造函数来创建新函数(以类似于eval()的方式创建函数来计算字符串, 会有漏洞)")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"避免将箭头函数语法(=>)与比较操作符(<=，>=)混淆(确保代码可读)"))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"    // bad\nconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\n// bad\nconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\n// good\nconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\n// good\nconst itemHeight = (item) => {\n  const { height, largeSize, smallSize } = item;\n  return height <= 256 ? largeSize : smallSize;\n};\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"总是使用类。 避免直接操纵原型(针对封装的工具类：类语法更简洁，也更容易阅读)")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction Queue(contents = []) {\n  this.queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};\n// good\nclass Queue {\n  constructor(contents = []) {\n    this.queue = [...contents];\n  }\n  pop() {\n    const value = this.queue[0];\n    this.queue.splice(0, 1);\n    return value;\n  }\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"使用=== 和 !== 代替 == and !=")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"避免不必要的三元语句"))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"    // bad\nconst foo = a ? a : b;\nconst bar = c ? true : false;\nconst baz = c ? false : true\n// good\nconst foo = a || b;\nconst bar = !!c;\nconst baz = !c;\n")),Object(b.b)("hr",null),Object(b.b)("hr",null),Object(b.b)("h3",{id:"react规范"},"react规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"如果你有内部状态和/或引用，最好是类扩展React 代替React.createClass")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"    // bad\nconst Listing = React.createClass({\n  // ...\n  render() {\n    return <div>{this.state.hello}</div>;\n  }\n});\n// good\nclass Listing extends React.Component {\n  // ...\n  render() {\n    return <div>{this.state.hello}</div>;\n  }\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"如果state或者refs，使用函数式代替class")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"高阶组件命名:使用高阶组件名称和传入组件名称的组合作为生成组件的displayName（会相对友好点：三方组件或者错误消息）"))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"    // bad\nclass Listing extends React.Component {\n  render() {\n    return <div>{this.props.hello}</div>;\n  }\n}\n// bad(不鼓励依赖函数名推断 )\nconst Listing = ({ hello }) => (\n  <div>{hello}</div>\n);\n// good\nfunction Listing({ hello }) {\n  return <div>{hello}</div>;\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"对React组件使用.jsx扩展")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"// bad\nexport default function withFoo(WrappedComponent) {\n  return function WithFoo(props) {\n    return <WrappedComponent {...props} foo />;\n  }\n}\n// good\nexport default function withFoo(WrappedComponent) {\n  function WithFoo(props) {\n    return <WrappedComponent {...props} foo />;\n  }\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    || 'Component';\n  WithFoo.displayName = `withFoo(${wrappedComponentName})`;\n  return WithFoo;\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"组件参数避免DOM component prop names， 例如 style, className...")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"不要使用displayName来命名组件。 相反，应该通过引用来命名组件"))),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"    // bad\nexport default React.createClass({\n  displayName: 'ReservationCard',\n  // stuff goes here\n});\n// good\nexport default class ReservationCard extends React.Component {\n}\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"始终为所有非必需的参数定义显式的defaultProps")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},"    // bad\nfunction SFC({ foo, bar, children }) {\n  return <div>{foo}{bar}{children}</div>;\n}\nSFC.propTypes = {\n  foo: PropTypes.number.isRequired,\n  bar: PropTypes.string,\n  children: PropTypes.node,\n};\n// good\nfunction SFC({ foo, bar, children }) {\n  return <div>{foo}{bar}{children}</div>;\n}\nSFC.propTypes = {\n  foo: PropTypes.number.isRequired,\n  bar: PropTypes.string,\n  children: PropTypes.node,\n};\nSFC.defaultProps = {\n  bar: '',\n  children: null,\n};\n")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"总是使用ref callbacks")),Object(b.b)("pre",null,Object(b.b)("code",{parentName:"pre",className:"language-javascript"},'// bad\n<Foo\n  ref="myRef"\n/>\n// good\n<Foo\n  ref={(ref) => { this.myRef = ref; }}\n/>\n')),Object(b.b)("h3",{id:"格式规范"},"格式规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"默认缩进2个空格"),Object(b.b)("li",{parentName:"ul"},"单引号"),Object(b.b)("li",{parentName:"ul"},"分号"),Object(b.b)("li",{parentName:"ul"},"数组/对象元素开始或结尾的对象的花括号中有空格"),Object(b.b)("li",{parentName:"ul"},"数组括号内需要一个或多个空格或换行符"),Object(b.b)("li",{parentName:"ul"},"允许在空行上结尾空白"),Object(b.b)("li",{parentName:"ul"},"允许评论块中的尾部空白"),Object(b.b)("li",{parentName:"ul"},"强制连续空行的最大数量 1"),Object(b.b)("li",{parentName:"ul"},"在文件结尾处强制执行最大数量的连续空行 0"),Object(b.b)("li",{parentName:"ul"},"在文件的开头强制执行最大数量的连续空行 0")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"代码提交规范"},"代码提交规范："),Object(b.b)("p",null," 仓库代码提交规范:  ","[时间]","20211010 | ","[版本]"," feature/3.41.1 | ","[标识]"," : ","[日志]"," (or use the util in @glen-build directly)\n例子： 202211010|feature/3.41.1|fix: bug fix example"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"feat：新功能（feature）"),Object(b.b)("li",{parentName:"ul"},"fix：修补bug"),Object(b.b)("li",{parentName:"ul"},"docs：文档（documentation）"),Object(b.b)("li",{parentName:"ul"},"style： 格式（不影响代码运行的变动）"),Object(b.b)("li",{parentName:"ul"},"refactor：重构（即不是新增功能，也不是修改bug的代码变动）"),Object(b.b)("li",{parentName:"ul"},"test：增加测试"),Object(b.b)("li",{parentName:"ul"},"chore：构建过程或辅助工具的变动"),Object(b.b)("li",{parentName:"ul"},"revert: 代码回滚"),Object(b.b)("li",{parentName:"ul"},"build: 影响系统构建或者外部依赖的更改（例如：glup，npm, broccoli）"),Object(b.b)("li",{parentName:"ul"},"ci: 对CI配置文件和脚本的修改"),Object(b.b)("li",{parentName:"ul"},"perf:性能提升")),Object(b.b)("hr",null),Object(b.b)("h3",{id:"业务流程规范"},"业务流程规范："),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"仓库代码需要fork之后管理在自己名下， 对应的自研辅助工具 @glen-build git"),Object(b.b)("li",{parentName:"ul"},"jiara: 确认需求"),Object(b.b)("li",{parentName:"ul"},"confluence： 获取和查看文档"),Object(b.b)("li",{parentName:"ul"},"wechat/飞书: 需求交流和交互"),Object(b.b)("li",{parentName:"ul"},"提测： ",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},"merge request -> 提交项目负责人走code view"),Object(b.b)("li",{parentName:"ul"},"测试/预发 ->  走自动部署， 开发部署到测试和语法环境， 走开发群通知上测试/jira任务单移动到测试中"),Object(b.b)("li",{parentName:"ul"},"上线 -> 测试技术群@ 到技术人员， 通知测试环境或者预发环境可上线"),Object(b.b)("li",{parentName:"ul"},"开发jiara上海申请上线文书，对应连接 粘贴到上线群，主管审核确认，运维负责上线")))))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!Object.prototype.hasOwnProperty.call(u,"__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/index.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-index-mdx-82199a9066ff340f0fbc.js.map